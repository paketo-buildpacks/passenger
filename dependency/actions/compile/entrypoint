#!/usr/bin/env bash

set -eu
set -o pipefail
shopt -s inherit_errexit

function main() {
  local version output_dir target upstream_tarball working_dir build_dir
  version=""
  output_dir=""
  target=""
  upstream_tarball=""
  working_dir=$(mktemp -d)
  build_dir=$(mktemp -d)

  while [ "${#}" != 0 ]; do
    case "${1}" in
      --version)
        version="${2}"
        shift 2
        ;;

      --outputDir)
        output_dir="${2}"
        shift 2
        ;;

      --target)
        target="${2}"
        shift 2
        ;;

      "")
        shift
        ;;

      *)
        echo "unknown argument \"${1}\""
        exit 1
    esac
  done

  if [[ "${version}" == "" ]]; then
    echo "--version is required"
    exit 1
  fi

  if [[ "${output_dir}" == "" ]]; then
    echo "--outputDir is required"
    exit 1
  fi

  if [[ "${target}" == "" ]]; then
    echo "--target is required"
    exit 1
  fi

  echo "version=${version}"
  echo "output_dir=${output_dir}"
  echo "target=${target}"
  echo "working_dir=${working_dir}"
  echo "build_dir=${build_dir}"

  pushd "${working_dir}" > /dev/null
    upstream_tarball="https://curl.se/download/curl-${version}.tar.gz"

    echo "Downloading upstream tarball from ${upstream_tarball}"

    curl "${upstream_tarball}" \
      --silent \
      --fail \
      --output upstream.tgz

    tar --extract \
      --strip-components=1 \
      --file upstream.tgz

    rm upstream.tgz

    ./configure --prefix="${build_dir}" --with-openssl --without-libpsl
    make
    make install

    echo "Listing contents of build_dir=${build_dir}"

    ls -lsa "${build_dir}"
  popd > /dev/null

  pushd "${build_dir}" > /dev/null
      tar --create \
        --gzip \
        --file "${output_dir}/temp.tgz" \
        .
  popd > /dev/null

  pushd "${output_dir}" > /dev/null
    local sha256
    sha256=$(sha256sum temp.tgz)
    sha256="${sha256:0:64}"

    output_tarball_name="curl_${version}_linux_${target}_${sha256:0:8}.tgz"

    echo "Building tarball ${output_tarball_name}"

    mv temp.tgz "${output_tarball_name}"
    echo "sha256:${sha256}" > "${output_tarball_name}.checksum"
  popd > /dev/null
}

main "${@:-}"
